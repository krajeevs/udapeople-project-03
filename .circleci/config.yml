version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
          type: string         
      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "<<parameters.workflow_id>>"
            #aws s3 rm s3://udapeople-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name "udapeople-krajeevs-p03-front-end-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-krajeevs-p03-back-end-<<parameters.workflow_id>>"

            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      workflow_id:
          type: string

    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            echo "<<parameters.workflow_id>>"
            SUCCESS=`curl -H "token: krajeevs_<<parameters.workflow_id>>" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>> `
            
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            #  Add revert code here. You can find this in the Getting Started section.
            npm run migrations:revert
              #exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            #echo `pwd`
            #ls -lart
            cd ~/project/frontend
            npm i
            npm run build
            echo "Done-frontend-build"
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             #echo `pwd`
             cd ~/project/backend
             npm i
             npm run build
             echo "Done-backend-build"
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: npm i
      - run: npm run test             
                      
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: npm i
      - run: npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm i
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
          
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend-end
          command: |
            cd backend
            npm i
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
          
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-krajeevs-p03-back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
               --stack-name "udapeople-krajeevs-p03-front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      #- run: aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > inventory.txt
            aws ec2 describe-instances --query Reservations[*].Instances[*].[PublicDnsName] --filters Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text >> inventory.txt
            cp -p inventory.txt ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --query Reservations[*].Instances[*].[PublicIpAddress] --filters Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text >> backend_url.txt
            mkdir ~/project/backend/dist
            mkdir ~/project/frontend/dist
            #aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"
            
            cat ~/project/.circleci/ansible/inventory.txt
            cat backend_url.txt
            #cat ~/project/backend_url.txt

            yum -y install tar gzip
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            #- project/.circleci/ansible/inventory.txt
            - project/
      # Here's where you will add some code to rollback on failure      
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9b:ef:6f:6e:9c:70:08:e3:52:7a:2d:18:4c:4e:68:4e"]
          
      # attach workspace
      - attach_workspace:
          at: ~/          
          
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook ~/project/.circleci/ansible/configure-server.yml -i ~/project/.circleci/ansible/inventory.txt
            #exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/ 
      - run:
          name: Run migrations
          no_output_timeout: 20m
          command: |
            # Your code here
            cd ~/project/backend
            npm i
            npm run migrations:revert
            #npm run migrations
            mystatus=$( npm run migrations | grep -i "has been executed successfully")
            echo $mystatus >> ~/project/migrations_status.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/
       
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if [ -z $mystatus ]
            then
            curl -H "Content-Type: text/plain" -H "token: krajeevs_${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
            echo 'Success'
            curl -H "Content-Type: text/plain" -H "token: krajeevs_${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            
            #curl -H "token: krajeevs_${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # exit 1
     # Here's where you will add some code to rollback on failure      

          
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
      #- image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install npm
            #yum -y install tar gzip
            #aws ec2 describe-instances --query Reservations[*].Instances[*].[PublicDnsName] --filters Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text > ~/project/backend_url.txt
            cat ~/project/backend_url.txt

      - run:
          name: Get backend url            
          command: |
            # your code here
            BACKEND_IP=`cat ~/project/backend_url.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            #apt-get install -y npm
            #yum install npm
            
            npm install
            npm start
            cd ~/project/frontend
            npm run build
            #cd ~/project/backend
            cd ./dist
            cp -pr ./dist ~/project/.circleci/ansible/roles/deploy/files/
            #ls -lart 
            #cd ~/project
            #aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9b:ef:6f:6e:9c:70:08:e3:52:7a:2d:18:4c:4e:68:4e"]
      # attach workspace
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            # your code here
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook ~/project/.circleci/ansible/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment: 
          #workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
      
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url
          command: |
            # your code here
            URL=`cat ~/project/backend_url.txt`
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo 'test'
      # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          

      - deploy-backend:
          #requires: [run-migrations]
          requires: [run-migrations]
      - deploy-frontend:
          requires: [deploy-backend]
          
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          ##requires: [run-migrations]
          #requires: [deploy-frontend]
          
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]
