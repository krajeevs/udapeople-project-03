version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["9b:ef:6f:6e:9c:70:08:e3:52:7a:2d:18:4c:4e:68:4e"]
      # attach workspace
      #- attach_workspace:
          #at: ~/  
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            # your code here
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            #tar -C backend -czvf artifact.tar.gz .
            ls -alrt 
            pwd
            aws s3 cp s3://udapeople-krajeevs-p03/ artifact.tar.gz 
            ls -alrt
            echo "[web]" >> ~/project/.circleci/ansible/inventory.txt
            echo "ec2-54-213-18-146.us-west-2.compute.amazonaws.com" >> ~/project/.circleci/ansible/inventory.txt
            
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook ~/project/.circleci/ansible/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt
            #exit 1
      # Here's where you will add some code to rollback on failure  



  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            #apt-get install python3-pip
            pip install awscli
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url
          command: |
            # your code here
            URL=`cat ~/project/backend_url.txt`":3030/api/status"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo 'test'
            URL=`cat ~/project/backend_url.txt`
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
            
      # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)
            
            echo $OldWorkflowID > oldworkflowid.txt
            cat oldworkflowid.txt
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text) 
            
            echo $STACKS
            echo $STACKS > stacks.txt
            cat stacks.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldworkflowid.txt
            - project/stacks.txt
      # Here's where you will add some code to rollback on failure  
      - revert-migrations: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            


    
  test3:
    docker:
      # Docker image here that supports AWS CLI
      #- image: amazon/aws-cli
      #- image: python:3.7-alpine3.11
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #- run: yum -y install tar gzip
      - add_ssh_keys:
          fingerprints: ["9b:ef:6f:6e:9c:70:08:e3:52:7a:2d:18:4c:4e:68:4e"]
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update
            sudo apt-get install python3
            sudo apt-get install awscli
      - run:
          name: Deploy frontend objects
          no_output_timeout: 20m
          command: |
          
            echo "Hello" > tmp_hello.txt
            pwd
            ls -alrt
            aws s3 cp s3://udapeople-krajeevs-p03/jumpbox1.pem jumpbox1.pem
            chmod 770 jumpbox1.pem
            ls -alrt
            ssh-keyscan ec2-54-213-18-146.us-west-2.compute.amazonaws.com >> ~/.ssh/known_hosts
            scp -i jumpbox1.pem -o CheckHostIP=no tmp_hello.txt ubuntu@ec2-54-213-18-146.us-west-2.compute.amazonaws.com:/home/ubuntu/
            
  test:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
      #- image: python:3.7-alpine3.11
      
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            echo "Hello"
            #sudo apt-get -y update
            #sudo apt-get install python3-pip
            #sudo apt-get install awscli
            ##pip install awscli
            sudo apt-get update
            sudo apt-get install python3
            sudo apt-get install awscli
            
            #exit 1
      - run:
          name: Get backend url
          command: |
            # your code here
            aws s3 ls
            #aws s3 rb s3://udapeople-d089d82 --force
            #aws cloudformation delete-stack --stack-name "udapeople-krajeevs-p03-front-end-d089d82"
            #aws cloudformation delete-stack --stack-name "udapeople-krajeevs-p03-back-end-d089d82"
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    

  test2:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            echo "Hello"
           
      - run:
          name: Get backend url
          command: |
            # your code here
            echo $SHELL
            uname -a
            pwd
            echo "ABC" > tmp.txt
            cat tmp.txt
 
            API_URL=`cat tmp.txt`
            #export API_URL="http://${BACKEND_IP}:3030"
            export API_URL="http://"`cat tmp.txt`":3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                       

workflows:
  default:
    jobs:
      - deploy-backend

      
